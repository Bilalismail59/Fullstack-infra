name: Setup SonarQube Infrastructure

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/sonarqube-setup.yaml'

env:
  PROJECT_ID: primordial-port-462408-q7
  CLUSTER_NAME: primordial-port-462408-q7-gke-cluster
  CLUSTER_REGION: europe-west9

jobs:
  deploy-sonarqube:
    runs-on: ubuntu-latest
    name: Deploy SonarQube to Kubernetes
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.CLUSTER_REGION }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Add SonarQube Helm repository
        run: |
          helm repo add sonarqube https://SonarSource.github.io/helm-chart-sonarqube
          helm repo update

      - name: Create SonarQube namespace
        run: |
          kubectl create namespace sonarqube --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy PostgreSQL for SonarQube
        run: |
          # Version simplifiée utilisant le chart Helm officiel
          helm install sonarqube-db bitnami/postgresql \
            --namespace sonarqube \
            --set auth.database=sonarqube \
            --set auth.username=sonarqube \
            --set auth.password=sonarqube123 \
            --set persistence.size=10Gi

      - name: Wait for PostgreSQL to be ready
        run: |
          kubectl wait --namespace sonarqube \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/instance=sonarqube-db \
            --timeout=300s

      - name: Deploy SonarQube
        run: |
          helm install sonarqube sonarqube/sonarqube \
            --namespace sonarqube \
            --set postgresql.enabled=false \
            --set postgresql.postgresqlServer=sonarqube-db-postgresql \
            --set postgresql.postgresqlDatabase=sonarqube \
            --set postgresql.postgresqlUsername=sonarqube \
            --set postgresql.postgresqlPassword=sonarqube123 \
            --set persistence.enabled=true \
            --set persistence.size=10Gi \
            --set resources.requests.memory=2Gi \
            --set resources.requests.cpu=1000m \
            --set resources.limits.memory=4Gi \
            --set resources.limits.cpu=2000m \
            --set service.type=LoadBalancer  # Modifié pour un accès externe simple

      - name: Wait for SonarQube to be ready
        run: |
          kubectl rollout status deployment/sonarqube-sonarqube -n sonarqube --timeout=600s

      - name: Get SonarQube status
        run: |
          echo "SonarQube deployment status:"
          kubectl get pods -n sonarqube
          kubectl get services -n sonarqube

          echo "SonarQube access information:"
          SONARQUBE_IP=$(kubectl get svc sonarqube-sonarqube -n sonarqube -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "External URL: http://$SONARQUBE_IP:9000"
          echo "Default credentials: admin/admin"

  configure-sonarqube:
    runs-on: ubuntu-latest
    needs: deploy-sonarqube
    name: Configure SonarQube Projects
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.CLUSTER_REGION }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Wait for SonarQube to be fully ready
        run: |
          echo "Waiting for SonarQube to be fully operational..."
          SONARQUBE_IP=$(kubectl get svc sonarqube-sonarqube -n sonarqube -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Wait for SonarQube to respond
          for i in {1..30}; do
            if curl -s "http://$SONARQUBE_IP:9000/api/system/status" | grep -q "UP"; then
              echo "SonarQube is ready!"
              break
            fi
            echo "Waiting for SonarQube... ($i/30)"
            sleep 10
          done

      - name: Create SonarQube projects
        run: |
          SONARQUBE_IP=$(kubectl get svc sonarqube-sonarqube -n sonarqube -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Create frontend project
          curl -X POST \
            -u admin:admin \
            -d "name=Frontend Application&project=frontend-app&visibility=public" \
            "http://$SONARQUBE_IP:9000/api/projects/create" || echo "Frontend project may already exist"

          # Create backend project
          curl -X POST \
            -u admin:admin \
            -d "name=Backend Application&project=backend-app&visibility=public" \
            "http://$SONARQUBE_IP:9000/api/projects/create" || echo "Backend project may already exist"

          echo "Projects created. Please manually generate tokens in SonarQube UI and add them to GitHub secrets:"
          echo "- SONAR_TOKEN: Project analysis token"
          echo "- SONAR_HOST_URL: http://$SONARQUBE_IP:9000"