services:
  # SonarQube Server
  sonarqube:
    image: sonarqube:community
    ports:
      - "9000:9000"
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      - postgres
    networks:
      - sonarqube-network
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  # PostgreSQL Database for SonarQube
  postgres:
    image: postgres:13
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sonarqube-network
    restart: unless-stopped

  # SonarQube Scanner (pour les analyses)
  sonar-scanner:
    image: sonarsource/sonar-scanner-cli:latest
    volumes:
      - ./frontend-app:/usr/src/frontend
      - ./backend-app:/usr/src/backend
      - ./sonar-scanner.properties:/opt/sonar-scanner/conf/sonar-scanner.properties
    networks:
      - sonarqube-network
    profiles:
      - scanner
    command: |
      sh -c "
        echo 'Scanning Frontend...'
        cd /usr/src/frontend
        sonar-scanner -Dsonar.projectKey=frontend -Dsonar.sources=src -Dsonar.host.url=http://sonarqube:9000
        
        echo 'Scanning Backend...'
        cd /usr/src/backend
        sonar-scanner -Dsonar.projectKey=backend -Dsonar.sources=src -Dsonar.host.url=http://sonarqube:9000
      "

volumes:
  sonarqube_data:
    driver: local
  sonarqube_extensions:
    driver: local
  sonarqube_logs:
    driver: local
  postgres_data:
    driver: local

networks:
  sonarqube-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16