name: Deploy SonarQube with Enhanced Monitoring

on:
  workflow_dispatch:
  push:
    paths:
      - 'kubernetes/sonarqube/**'

env:
  PROJECT_ID: primordial-port-462408-q7
  CLUSTER_NAME: primordial-port-462408-q7-gke-cluster
  CLUSTER_REGION: europe-west9
  POSTGRES_VERSION: 13
  SONARQUBE_CHART_VERSION: 9.9.1
  POSTGRES_STORAGE: 10Gi
  SONARQUBE_STORAGE: 10Gi

jobs:
  deploy-sonarqube:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials $CLUSTER_NAME \
          --region $CLUSTER_REGION \
          --project $PROJECT_ID

    - name: Pre-deployment Cluster Check
      run: |
        echo " VÉRIFICATION PRÉ-DÉPLOIEMENT"
        echo "================================"
        
        echo "=== Nœuds du cluster ==="
        kubectl get nodes -o wide
        
        echo "=== Ressources disponibles ==="
        kubectl describe nodes | grep -A 5 "Allocated resources"
        
        echo "=== Classes de stockage ==="
        kubectl get storageclass
        
        echo "=== Utilisation actuelle ==="
        kubectl top nodes || echo "Metrics server non disponible"

    - name: Create Namespace
      run: |
        kubectl create namespace sonarqube --dry-run=client -o yaml | kubectl apply -f -
        kubectl label namespace sonarqube name=sonarqube --overwrite

    - name: Deploy PostgreSQL
      run: |
        echo " DÉPLOIEMENT POSTGRESQL"
        echo "========================="
        
        kubectl apply -f kubernetes/postgres-optimized.yaml
        
        echo "=== Vérification du déploiement ==="
        kubectl get deployment postgres -n sonarqube
        kubectl get pvc postgres-pvc -n sonarqube

    - name: Wait for PostgreSQL PVC
      run: |
        echo " ATTENTE DU VOLUME PERSISTANT"
        echo "==============================="
        
        kubectl wait --for=condition=bound pvc/postgres-pvc -n sonarqube --timeout=300s
        
        echo "=== État du PVC ==="
        kubectl describe pvc postgres-pvc -n sonarqube

    - name: Monitor PostgreSQL Startup
      run: |
        echo " SURVEILLANCE DU DÉMARRAGE POSTGRESQL"
        echo "========================================"
        
        # Fonction pour afficher l'état
        show_status() {
          echo "--- État actuel ---"
          kubectl get pods -n sonarqube -l app=postgres -o wide
          kubectl get deployment postgres -n sonarqube
        }
        
        # Attendre que le pod soit créé
        echo "Attente de la création du pod..."
        timeout 120s bash -c 'until kubectl get pods -n sonarqube -l app=postgres 2>/dev/null | grep -q postgres; do 
          echo "Pod pas encore créé, attente..."
          sleep 10
        done'
        
        show_status
        
        # Surveiller le démarrage avec logs
        echo "=== Surveillance des logs de démarrage ==="
        kubectl logs -f -l app=postgres -n sonarqube --tail=10 &
        LOG_PID=$!
        
        # Attendre que le pod soit prêt avec timeout personnalisé
        echo "Attente que PostgreSQL soit prêt..."
        for i in {1..60}; do
          echo "Tentative $i/60..."
          
          if kubectl get pods -n sonarqube -l app=postgres | grep -q "1/1.*Running"; then
            echo " PostgreSQL est prêt!"
            break
          fi
          
          # Afficher l'état toutes les 5 tentatives
          if [ $((i % 5)) -eq 0 ]; then
            show_status
            echo "=== Événements récents ==="
            kubectl get events -n sonarqube --sort-by='.lastTimestamp' | tail -5
          fi
          
          sleep 10
        done
        
        # Arrêter le suivi des logs
        kill $LOG_PID 2>/dev/null || true
        
        # Vérification finale
        show_status

    - name: Verify PostgreSQL Connection
      run: |
        echo " VÉRIFICATION DE LA CONNEXION POSTGRESQL"
        echo "=========================================="
        
        # Attendre que le service soit prêt
        kubectl wait --for=condition=available deployment/postgres -n sonarqube --timeout=300s
        
        # Test de connexion
        echo "Test de connexion à PostgreSQL..."
        kubectl exec -n sonarqube deployment/postgres -- pg_isready -U sonar -d sonar -h localhost
        
        # Vérifier que la base de données existe
        echo "Vérification de la base de données..."
        kubectl exec -n sonarqube deployment/postgres -- psql -U sonar -d sonar -c "SELECT version();"
        
        echo " PostgreSQL est opérationnel!"

    - name: Deploy SonarQube
      run: |
        echo " DÉPLOIEMENT SONARQUBE"
        echo "========================"
        
        kubectl apply -f kubernetes/sonarqube.yaml
        
        echo "=== État du déploiement SonarQube ==="
        kubectl get deployment sonarqube -n sonarqube

    - name: Wait for SonarQube
      run: |
        echo " ATTENTE DE SONARQUBE"
        echo "======================"
        
        # Attendre avec un timeout plus long pour SonarQube
        kubectl wait --for=condition=available deployment/sonarqube -n sonarqube --timeout=900s
        
        echo "=== État final ==="
        kubectl get pods -n sonarqube
        kubectl get svc -n sonarqube

    - name: Get Access Information
      run: |
        echo " INFORMATIONS D'ACCÈS"
        echo "======================="
        
        echo "=== Services ==="
        kubectl get svc -n sonarqube
        
        echo "=== Ingress (si configuré) ==="
        kubectl get ingress -n sonarqube || echo "Aucun ingress configuré"
        
        echo "=== Pour accéder à SonarQube localement ==="
        echo "kubectl port-forward -n sonarqube svc/sonarqube 9000:9000"
        echo "Puis ouvrir http://localhost:9000"
        echo "Identifiants par défaut: admin/admin"

    - name: Run Diagnostic on Failure
      if: failure()
      run: |
        echo " DIAGNOSTIC EN CAS D'ÉCHEC"
        echo "============================"
        
        # Utiliser le script de diagnostic
        chmod +x scripts/debug-postgres.sh
        ./scripts/debug-postgres.sh sonarqube
        
        echo "=== Logs SonarQube ==="
        kubectl logs -l app=sonarqube -n sonarqube --tail=100 || echo "Pas de logs SonarQube"
        
        echo "=== Tous les événements ==="
        kubectl get events -n sonarqube --sort-by='.lastTimestamp'
        
        echo "=== État final de tous les objets ==="
        kubectl get all -n sonarqube -o wide

    - name: Cleanup on Manual Request
      if: github.event.inputs.cleanup == 'true'
      run: |
        echo " NETTOYAGE"
        echo "============"
        kubectl delete namespace sonarqube --ignore-not-found=true

