#!/bin/bash

# Script de diagnostic complet pour SonarQube
# Identifie pourquoi SonarQube prend plus de 45 minutes √† d√©marrer

echo " DIAGNOSTIC COMPLET SONARQUBE"
echo "==============================="
echo "Date: $(date)"
echo ""

# 1. √âtat g√©n√©ral du cluster
echo " 1. √âTAT G√âN√âRAL DU CLUSTER"
echo "-----------------------------"
echo "N≈ìuds du cluster:"
kubectl get nodes -o wide

echo ""
echo "Utilisation des ressources par n≈ìud:"
kubectl top nodes 2>/dev/null || echo " Metrics server non disponible"

echo ""
echo "Pods en cours d'ex√©cution:"
kubectl get pods --all-namespaces | grep -E "(Running|Pending|Error|CrashLoopBackOff)"

# 2. √âtat sp√©cifique du namespace SonarQube
echo ""
echo " 2. √âTAT NAMESPACE SONARQUBE"
echo "------------------------------"
echo "Pods SonarQube:"
kubectl get pods -n sonarqube -o wide

echo ""
echo "Services SonarQube:"
kubectl get svc -n sonarqube

echo ""
echo "PVCs SonarQube:"
kubectl get pvc -n sonarqube

echo ""
echo "√âv√©nements r√©cents dans le namespace:"
kubectl get events -n sonarqube --sort-by='.lastTimestamp' | tail -20

# 3. Diagnostic d√©taill√© des pods SonarQube
echo ""
echo " 3. DIAGNOSTIC D√âTAILL√â PODS SONARQUBE"
echo "----------------------------------------"

SONAR_PODS=$(kubectl get pods -n sonarqube -l app.kubernetes.io/name=sonarqube -o jsonpath='{.items[*].metadata.name}' 2>/dev/null)

if [ -n "$SONAR_PODS" ]; then
    for pod in $SONAR_PODS; do
        echo ""
        echo "=== Pod: $pod ==="
        
        echo "√âtat du pod:"
        kubectl describe pod $pod -n sonarqube | grep -A 10 -E "(Status|Conditions|Events)"
        
        echo ""
        echo "Logs r√©cents (50 derni√®res lignes):"
        kubectl logs $pod -n sonarqube --tail=50 2>/dev/null || echo "Pas de logs disponibles"
        
        echo ""
        echo "Utilisation des ressources:"
        kubectl top pod $pod -n sonarqube 2>/dev/null || echo "M√©triques non disponibles"
    done
else
    echo " Aucun pod SonarQube trouv√©"
fi

# 4. Diagnostic PostgreSQL
echo ""
echo "üóÑÔ∏è 4. DIAGNOSTIC POSTGRESQL"
echo "---------------------------"

POSTGRES_PODS=$(kubectl get pods -n sonarqube -l app=postgres -o jsonpath='{.items[*].metadata.name}' 2>/dev/null)

if [ -n "$POSTGRES_PODS" ]; then
    for pod in $POSTGRES_PODS; do
        echo ""
        echo "=== PostgreSQL Pod: $pod ==="
        
        echo "√âtat du pod:"
        kubectl describe pod $pod -n sonarqube | grep -A 5 -E "(Status|Ready)"
        
        echo ""
        echo "Test de connexion:"
        kubectl exec $pod -n sonarqube -- pg_isready -U sonarqube -d sonarqube 2>/dev/null || echo " PostgreSQL non accessible"
        
        echo ""
        echo "Logs PostgreSQL (20 derni√®res lignes):"
        kubectl logs $pod -n sonarqube --tail=20 2>/dev/null || echo "Pas de logs disponibles"
    done
else
    echo " Aucun pod PostgreSQL trouv√©"
fi

# 5. Analyse des ressources disponibles
echo ""
echo " 5. ANALYSE DES RESSOURCES"
echo "----------------------------"

echo "Quotas et limites:"
kubectl describe quota -n sonarqube 2>/dev/null || echo "Pas de quotas configur√©s"

echo ""
echo "Utilisation du stockage:"
kubectl get pv | grep sonarqube 2>/dev/null || echo "Pas de volumes persistants SonarQube"

echo ""
echo "Capacit√© des n≈ìuds:"
kubectl describe nodes | grep -A 5 "Allocated resources" | head -20

# 6. V√©rification de la connectivit√© r√©seau
echo ""
echo " 6. V√âRIFICATION R√âSEAU"
echo "------------------------"

echo "Services LoadBalancer:"
kubectl get svc -n sonarqube -o wide | grep LoadBalancer

echo ""
echo "Endpoints des services:"
kubectl get endpoints -n sonarqube

# 7. Analyse des erreurs communes
echo ""
echo " 7. ANALYSE DES ERREURS COMMUNES"
echo "----------------------------------"

echo "Recherche d'erreurs dans les logs SonarQube:"
if [ -n "$SONAR_PODS" ]; then
    for pod in $SONAR_PODS; do
        echo ""
        echo "=== Erreurs dans $pod ==="
        kubectl logs $pod -n sonarqube 2>/dev/null | grep -i -E "(error|exception|failed|timeout|out of memory|oom)" | tail -10 || echo "Aucune erreur trouv√©e"
    done
fi

echo ""
echo "Recherche d'erreurs dans les √©v√©nements:"
kubectl get events -n sonarqube | grep -i -E "(error|failed|warning)" | tail -10 || echo "Aucune erreur dans les √©v√©nements"

# 8. Recommandations bas√©es sur l'analyse
echo ""
echo " 8. RECOMMANDATIONS"
echo "--------------------"

# V√©rifier les ressources CPU/M√©moire
TOTAL_CPU=$(kubectl top nodes 2>/dev/null | awk 'NR>1 {sum+=$3} END {print sum}' | sed 's/%//')
TOTAL_MEM=$(kubectl top nodes 2>/dev/null | awk 'NR>1 {sum+=$5} END {print sum}' | sed 's/%//')

if [ -n "$TOTAL_CPU" ] && [ "$TOTAL_CPU" -gt 80 ]; then
    echo " CPU cluster surcharg√© ($TOTAL_CPU%) - R√©duire les ressources SonarQube"
fi

if [ -n "$TOTAL_MEM" ] && [ "$TOTAL_MEM" -gt 80 ]; then
    echo " M√©moire cluster surcharg√©e ($TOTAL_MEM%) - R√©duire les ressources SonarQube"
fi

# V√©rifier si PostgreSQL fonctionne
if kubectl exec -n sonarqube deployment/postgres -- pg_isready -U sonarqube -d sonarqube >/dev/null 2>&1; then
    echo " PostgreSQL fonctionne correctement"
else
    echo " PostgreSQL ne r√©pond pas - V√©rifier la base de donn√©es"
fi

# V√©rifier les PVCs
PENDING_PVCS=$(kubectl get pvc -n sonarqube | grep Pending | wc -l)
if [ "$PENDING_PVCS" -gt 0 ]; then
    echo " $PENDING_PVCS PVC(s) en attente - Probl√®me de stockage"
fi

echo ""
echo " R√âSUM√â DU DIAGNOSTIC"
echo "======================"
echo "‚Ä¢ V√©rifiez les logs SonarQube ci-dessus pour les erreurs sp√©cifiques"
echo "‚Ä¢ Si CPU/M√©moire surcharg√©s: R√©duire les ressources SonarQube"
echo "‚Ä¢ Si PostgreSQL ne r√©pond pas: Red√©marrer PostgreSQL"
echo "‚Ä¢ Si PVCs en attente: V√©rifier les quotas de stockage"
echo "‚Ä¢ Consid√©rer un d√©ploiement sans --wait pour √©viter les timeouts"
echo ""
echo "Diagnostic termin√©: $(date)"

