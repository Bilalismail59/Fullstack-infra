name: Deploy SonarQube WITHOUT Helm Timeout

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths: [".github/workflows/sonarqube-no-timeout.yaml"]

env:
  PROJECT_ID: primordial-port-462408-q7
  CLUSTER_NAME: primordial-port-462408-q7-gke-cluster
  CLUSTER_REGION: europe-west9
  POSTGRES_VERSION: "13"
  SONARQUBE_CHART_VERSION: "2025.3.0"
  POSTGRES_STORAGE: "10Gi"
  SONARQUBE_STORAGE: "10Gi"

jobs:
  deploy-sonarqube-no-timeout:
    runs-on: ubuntu-latest
    timeout-minutes: 90  # Timeout du job étendu
    outputs:
      sonar_url: ${{ steps.monitor.outputs.url }}
      monitoring_passcode: ${{ steps.deploy.outputs.passcode }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.CLUSTER_REGION }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Add Helm repositories
        run: |
          echo " Mise à jour des repositories Helm..."
          helm repo add sonarqube https://SonarSource.github.io/helm-chart-sonarqube
          helm repo update

      - name: Prepare namespace and cleanup
        run: |
          echo " Préparation du namespace..."
          kubectl create ns sonarqube --dry-run=client -o yaml | kubectl apply -f -
          
          # Nettoyer seulement les déploiements SonarQube
          kubectl delete deployment sonarqube sonarqube-sonarqube --ignore-not-found=true -n sonarqube
          
          echo " Attente du nettoyage..."
          sleep 15

      - name: Deploy SonarQube WITHOUT --wait
        id: deploy
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          # Générer un passcode de monitoring unique
          MONITORING_PASSCODE="monitoring-$(date +%s)-$(openssl rand -hex 4)"
          echo "passcode=$MONITORING_PASSCODE" >> $GITHUB_OUTPUT
          
          echo " Déploiement SonarQube version ${{ env.SONARQUBE_CHART_VERSION }}..."
          echo " Passcode de monitoring: $MONITORING_PASSCODE"
          echo " Mode SANS --wait pour éviter les timeouts"
          
          # Déploiement avec ressources réduites et SANS --wait
          helm upgrade --install sonarqube sonarqube/sonarqube \
            --namespace sonarqube \
            --version ${{ env.SONARQUBE_CHART_VERSION }} \
            --set postgresql.enabled=false \
            --set postgresql.postgresqlServer=postgres.sonarqube.svc.cluster.local \
            --set postgresql.postgresqlDatabase=sonarqube \
            --set postgresql.postgresqlUsername=sonarqube \
            --set postgresql.postgresqlPassword="$POSTGRES_PASSWORD" \
            --set persistence.enabled=true \
            --set persistence.size=${{ env.SONARQUBE_STORAGE }} \
            --set service.type=LoadBalancer \
            --set resources.requests.memory=512Mi \
            --set resources.requests.cpu=200m \
            --set resources.limits.memory=1Gi \
            --set resources.limits.cpu=500m \
            --set sonarProperties."sonar\.es\.bootstrap\.checks\.disable"=true \
            --set monitoringPasscode="$MONITORING_PASSCODE" \
            --set community.enabled=true
          
          echo " Déploiement Helm lancé avec succès (sans attendre)"

      - name: Monitor SonarQube startup manually
        id: monitor
        run: |
          echo " SURVEILLANCE MANUELLE DU DÉMARRAGE"
          echo "===================================="
          echo " Surveillance des pods SonarQube pendant 60 minutes max..."
          echo ""
          
          max_attempts=120  # 60 minutes (30s * 120)
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "=== Vérification $attempt/$max_attempts ($(date +%H:%M:%S)) ==="
            
            # État des pods
            echo " État des pods SonarQube:"
            kubectl get pods -n sonarqube -l app.kubernetes.io/name=sonarqube -o wide 2>/dev/null || echo "Aucun pod trouvé"
            
            # Vérifier si un pod est en cours d'exécution
            RUNNING_PODS=$(kubectl get pods -n sonarqube -l app.kubernetes.io/name=sonarqube --no-headers 2>/dev/null | grep "1/1.*Running" | wc -l)
            
            if [ "$RUNNING_PODS" -gt 0 ]; then
              echo " Pod SonarQube en cours d'exécution détecté!"
              
              # Vérifier l'IP du LoadBalancer
              echo ""
              echo " Vérification du LoadBalancer..."
              SONAR_IP=$(kubectl get svc sonarqube-sonarqube -n sonarqube -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
              
              if [ -n "$SONAR_IP" ]; then
                echo " IP externe assignée: $SONAR_IP"
                SONAR_URL="http://$SONAR_IP:9000"
                echo "url=$SONAR_URL" >> $GITHUB_OUTPUT
                
                # Test de l'API
                echo " Test de l'API SonarQube..."
                if curl -sSf "$SONAR_URL/api/system/status" 2>/dev/null | grep -q "UP\|STARTING"; then
                  echo " SonarQube API répond!"
                  echo ""
                  echo " DÉPLOIEMENT RÉUSSI!"
                  echo "===================="
                  echo " URL: $SONAR_URL"
                  echo " Identifiants: admin / admin"
                  echo ""
                  break
                else
                  echo " API pas encore prête, SonarQube démarre encore..."
                fi
              else
                echo " IP externe pas encore assignée..."
              fi
            fi
            
            # Afficher les logs récents
            echo ""
            echo " Logs récents (3 dernières lignes):"
            kubectl logs -l app.kubernetes.io/name=sonarqube -n sonarqube --tail=3 --since=30s 2>/dev/null || echo "Pas de logs disponibles"
            
            # Afficher les événements récents
            echo ""
            echo " Événements récents:"
            kubectl get events -n sonarqube --sort-by='.lastTimestamp' | tail -2 2>/dev/null || echo "Pas d'événements"
            
            echo ""
            echo " Attente 30 secondes..."
            sleep 30
            
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo " Timeout atteint après 60 minutes"
            echo " Lancement du diagnostic..."
            
            # Diagnostic automatique
            echo ""
            echo " DIAGNOSTIC AUTOMATIQUE"
            echo "========================="
            
            echo "État final des pods:"
            kubectl get pods -n sonarqube -o wide
            
            echo ""
            echo "Logs complets SonarQube:"
            kubectl logs -l app.kubernetes.io/name=sonarqube -n sonarqube --tail=50 2>/dev/null || echo "Pas de logs"
            
            echo ""
            echo "Événements du namespace:"
            kubectl get events -n sonarqube --sort-by='.lastTimestamp' | tail -10
            
            echo ""
            echo "Utilisation des ressources:"
            kubectl top nodes 2>/dev/null || echo "Métriques non disponibles"
            
            exit 1
          fi

      - name: Display final status
        if: success()
        env:
          SONAR_URL: ${{ steps.monitor.outputs.url }}
          MONITORING_PASSCODE: ${{ steps.deploy.outputs.passcode }}
        run: |
          echo " SONARQUBE DÉPLOYÉ AVEC SUCCÈS!"
          echo "================================="
          echo ""
          echo " Informations finales:"
          echo "• Version SonarQube: ${{ env.SONARQUBE_CHART_VERSION }}"
          echo "• URL: $SONAR_URL"
          echo "• Identifiants: admin / admin"
          echo "• Passcode monitoring: $MONITORING_PASSCODE"
          echo ""
          echo " État final des services:"
          kubectl get pods -n sonarqube
          kubectl get svc -n sonarqube
          echo ""
          echo " SonarQube est prêt à être utilisé!"

  configure-projects:
    runs-on: ubuntu-latest
    needs: deploy-sonarqube-no-timeout
    if: success()
    steps:
      - name: Configure SonarQube projects
        env:
          SONAR_URL: ${{ needs.deploy-sonarqube-no-timeout.outputs.sonar_url }}
          SONAR_ADMIN_PASSWORD: ${{ secrets.SONAR_ADMIN_PASSWORD }}
        run: |
          echo " Configuration des projets SonarQube..."
          
          # Attendre que SonarQube soit complètement prêt
          for i in {1..20}; do
            if curl -sSf "$SONAR_URL/api/system/health" 2>/dev/null | grep -q "GREEN"; then
              echo " SonarQube prêt pour la configuration"
              break
            fi
            echo "Attente SonarQube... ($i/20)"
            sleep 30
          done
          
          # Configuration des projets
          echo " Création des projets..."
          curl -X POST "$SONAR_URL/api/projects/create" \
            -u "admin:admin" \
            -d "name=Frontend&project=frontend&visibility=public" \
            --fail-with-body || echo " Projet frontend existe déjà"
          
          curl -X POST "$SONAR_URL/api/projects/create" \
            -u "admin:admin" \
            -d "name=Backend&project=backend&visibility=public" \
            --fail-with-body || echo " Projet backend existe déjà"
          
          echo " Configuration terminée!"