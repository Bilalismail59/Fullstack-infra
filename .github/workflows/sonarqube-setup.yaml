name: Setup SonarQube Infrastructure

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths: [".github/workflows/sonarqube-setup.yaml"]

env:
  PROJECT_ID: primordial-port-462408-q7
  CLUSTER_NAME: primordial-port-462408-q7-gke-cluster
  CLUSTER_REGION: europe-west9
  POSTGRES_VERSION: "13"
  SONARQUBE_CHART_VERSION: "2025.3.0"
  POSTGRES_STORAGE: "10Gi"
  SONARQUBE_STORAGE: "10Gi"

jobs:
  deploy-sonarqube:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    outputs:
      sonar_url: ${{ steps.get-url.outputs.url }}
      monitoring_passcode: ${{ steps.deploy-sonar.outputs.passcode }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.CLUSTER_REGION }}
          project_id: ${{ env.PROJECT_ID }}

      - name: Add Helm repositories and update
        run: |
          echo " Mise à jour des repositories Helm..."
          helm repo add sonarqube https://SonarSource.github.io/helm-chart-sonarqube
          helm repo update

      - name: Create namespace and verify existing resources
        run: |
          echo " Préparation du namespace..."
          kubectl create ns sonarqube --dry-run=client -o yaml | kubectl apply -f -
          
          echo " État des ressources existantes:"
          kubectl get pvc -n sonarqube || echo "Aucun PVC trouvé"
          kubectl get pods -n sonarqube || echo "Aucun pod trouvé"
          
          # Nettoyer seulement les déploiements, garder les PVCs
          echo " Nettoyage des déploiements existants..."
          kubectl delete deployment postgres sonarqube --ignore-not-found=true -n sonarqube
          
          echo " Attente du nettoyage..."
          sleep 15

      - name: Deploy PostgreSQL with existing PVC (NO QUOTA ISSUES)
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          echo " Recherche d'un PVC PostgreSQL existant..."
          
          # Chercher un PVC PostgreSQL existant et lié
          EXISTING_PVC=$(kubectl get pvc -n sonarqube -o jsonpath='{.items[?(@.status.phase=="Bound")].metadata.name}' | tr ' ' '\n' | grep -E '^postgres-pvc-' | head -1 || echo "")
          
          if [ -n "$EXISTING_PVC" ]; then
            echo " PVC existant trouvé: $EXISTING_PVC"
            PVC_NAME="$EXISTING_PVC"
          else
            echo " Aucun PVC PostgreSQL existant trouvé"
            echo " PVCs disponibles:"
            kubectl get pvc -n sonarqube
            exit 1
          fi
          
          echo " Déploiement PostgreSQL avec PVC existant: $PVC_NAME"
          
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: postgres-secret
            namespace: sonarqube
          type: Opaque
          data:
            postgres-password: $(echo -n "$POSTGRES_PASSWORD" | base64 -w0)
          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: postgres
            namespace: sonarqube
            labels:
              app: postgres
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: postgres
            template:
              metadata:
                labels:
                  app: postgres
              spec:
                containers:
                - name: postgres
                  image: postgres:${{ env.POSTGRES_VERSION }}
                  env:
                  - name: POSTGRES_DB
                    value: sonarqube
                  - name: POSTGRES_USER
                    value: sonarqube
                  - name: POSTGRES_PASSWORD
                    valueFrom:
                      secretKeyRef:
                        name: postgres-secret
                        key: postgres-password
                  - name: PGDATA
                    value: /var/lib/postgresql/data/pgdata
                  ports:
                  - containerPort: 5432
                  volumeMounts:
                  - name: postgres-storage
                    mountPath: /var/lib/postgresql/data
                  readinessProbe:
                    exec:
                      command: ["pg_isready", "-U", "sonarqube", "-d", "sonarqube"]
                    initialDelaySeconds: 15
                    periodSeconds: 5
                    timeoutSeconds: 3
                    failureThreshold: 6
                  livenessProbe:
                    exec:
                      command: ["pg_isready", "-U", "sonarqube", "-d", "sonarqube"]
                    initialDelaySeconds: 30
                    periodSeconds: 10
                    timeoutSeconds: 5
                    failureThreshold: 3
                  startupProbe:
                    exec:
                      command: ["pg_isready", "-U", "sonarqube", "-d", "sonarqube"]
                    initialDelaySeconds: 5
                    periodSeconds: 5
                    timeoutSeconds: 3
                    failureThreshold: 20
                  resources:
                    requests:
                      memory: "128Mi"
                      cpu: "100m"
                    limits:
                      memory: "256Mi"
                      cpu: "200m"
                volumes:
                - name: postgres-storage
                  persistentVolumeClaim:
                    claimName: $PVC_NAME
                securityContext:
                  fsGroup: 999
                  runAsUser: 999
                  runAsGroup: 999
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: postgres
            namespace: sonarqube
            labels:
              app: postgres
          spec:
            ports:
            - port: 5432
            selector:
              app: postgres
          EOF
          
          # Sauvegarder le nom du PVC pour les étapes suivantes
          echo "PVC_NAME=$PVC_NAME" >> $GITHUB_ENV

      - name: Wait for PostgreSQL to be ready
        run: |
          echo " Attente de PostgreSQL..."
          
          # Attendre que le pod soit prêt
          kubectl wait --for=condition=available deployment/postgres -n sonarqube --timeout=300s
          
          # Vérifier que PostgreSQL répond
          echo " Test de connexion PostgreSQL..."
          for i in {1..10}; do
            if kubectl exec -n sonarqube deployment/postgres -- pg_isready -U sonarqube -d sonarqube; then
              echo " PostgreSQL est opérationnel!"
              break
            fi
            echo "Attente de PostgreSQL... ($i/10)"
            sleep 10
          done

      - name: Deploy SonarQube with all fixes
        id: deploy-sonar
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          # Générer un passcode de monitoring unique
          MONITORING_PASSCODE="monitoring-$(date +%s)-$(openssl rand -hex 4)"
          echo "passcode=$MONITORING_PASSCODE" >> $GITHUB_OUTPUT
          
          echo " Déploiement SonarQube version ${{ env.SONARQUBE_CHART_VERSION }}..."
          echo " Passcode de monitoring: $MONITORING_PASSCODE"
          
          helm upgrade --install sonarqube sonarqube/sonarqube \
            --namespace sonarqube \
            --version ${{ env.SONARQUBE_CHART_VERSION }} \
            --set postgresql.enabled=false \
            --set postgresql.postgresqlServer=postgres.sonarqube.svc.cluster.local \
            --set postgresql.postgresqlDatabase=sonarqube \
            --set postgresql.postgresqlUsername=sonarqube \
            --set postgresql.postgresqlPassword="$POSTGRES_PASSWORD" \
            --set persistence.enabled=true \
            --set persistence.size=${{ env.SONARQUBE_STORAGE }} \
            --set service.type=LoadBalancer \
            --set resources.requests.memory=1Gi \
            --set resources.requests.cpu=500m \
            --set resources.limits.memory=2Gi \
            --set resources.limits.cpu=1000m \
            --set sonarProperties."sonar\.es\.bootstrap\.checks\.disable"=true \
            --set monitoringPasscode="$MONITORING_PASSCODE" \
            --timeout 15m \
            --wait

      - name: Wait for SonarQube to be ready
        run: |
          echo " Attente de SonarQube..."
          
          # Attendre que le service soit disponible
          kubectl wait --for=condition=available deployment/sonarqube-sonarqube -n sonarqube --timeout=900s
          
          # Attendre que l'IP externe soit assignée
          echo " Attente de l'IP externe..."
          for i in {1..20}; do
            SONAR_IP=$(kubectl get svc sonarqube-sonarqube -n sonarqube -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
            if [ -n "$SONAR_IP" ]; then
              echo " IP externe assignée: $SONAR_IP"
              break
            fi
            echo "Attente de l'IP externe... ($i/20)"
            sleep 15
          done

      - name: Get SonarQube URL and test connectivity
        id: get-url
        run: |
          SONAR_IP=$(kubectl get svc sonarqube-sonarqube -n sonarqube -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          SONAR_URL="http://$SONAR_IP:9000"
          
          echo "url=$SONAR_URL" >> $GITHUB_OUTPUT
          echo " SonarQube URL: $SONAR_URL"
          
          # Test de connectivité
          echo " Test de connectivité..."
          for i in {1..20}; do
            if curl -sSf "$SONAR_URL/api/system/status" | grep -q "UP\|STARTING"; then
              echo " SonarQube répond!"
              curl -s "$SONAR_URL/api/system/status" | jq '.' 2>/dev/null || curl -s "$SONAR_URL/api/system/status"
              break
            fi
            echo "Attente de SonarQube... ($i/20)"
            sleep 30
          done

      - name: Display deployment summary
        env:
          SONAR_URL: ${{ steps.get-url.outputs.url }}
          MONITORING_PASSCODE: ${{ steps.deploy-sonar.outputs.passcode }}
        run: |
          echo " DÉPLOIEMENT SONARQUBE TERMINÉ AVEC SUCCÈS!"
          echo "============================================="
          echo ""
          echo " Informations de déploiement:"
          echo "• Version SonarQube: ${{ env.SONARQUBE_CHART_VERSION }}"
          echo "• URL: $SONAR_URL"
          echo "• Identifiants par défaut: admin / admin"
          echo "• Passcode de monitoring: $MONITORING_PASSCODE"
          echo ""
          echo " État des services:"
          kubectl get pods -n sonarqube
          kubectl get svc -n sonarqube
          kubectl get pvc -n sonarqube
          echo ""
          echo " SonarQube est prêt pour la configuration des projets!"

  configure-sonarqube:
    runs-on: ubuntu-latest
    needs: deploy-sonarqube
    if: success()
    steps:
      - name: Configure projects and admin password
        env:
          SONAR_URL: ${{ needs.deploy-sonarqube.outputs.sonar_url }}
          SONAR_ADMIN_PASSWORD: ${{ secrets.SONAR_ADMIN_PASSWORD }}
          MONITORING_PASSCODE: ${{ needs.deploy-sonarqube.outputs.monitoring_passcode }}
        run: |
          echo " Configuration de SonarQube..."
          
          # Attendre que SonarQube soit complètement prêt
          for i in {1..30}; do
            if curl -sSf "$SONAR_URL/api/system/health" | grep -q "GREEN"; then
              echo " SonarQube est prêt pour la configuration"
              break
            fi
            echo "Attente que SonarQube soit prêt... ($i/30)"
            sleep 20
          done

          # Changer le mot de passe admin
          echo " Changement du mot de passe admin..."
          curl -X POST "$SONAR_URL/api/users/change_password" \
            -u "admin:admin" \
            -d "login=admin&password=$SONAR_ADMIN_PASSWORD&previousPassword=admin" \
            --fail-with-body || echo " Mot de passe déjà changé ou erreur"

          # Créer les projets
          echo " Création des projets..."
          curl -X POST "$SONAR_URL/api/projects/create" \
            -u "admin:$SONAR_ADMIN_PASSWORD" \
            -d "name=Frontend&project=frontend&visibility=public" \
            --fail-with-body || echo " Projet frontend existe déjà"
          
          curl -X POST "$SONAR_URL/api/projects/create" \
            -u "admin:$SONAR_ADMIN_PASSWORD" \
            -d "name=Backend&project=backend&visibility=public" \
            --fail-with-body || echo " Projet backend existe déjà"
          
          echo ""
          echo " Configuration terminée!"
          echo "========================="
          echo " SonarQube accessible à: $SONAR_URL"
          echo " Identifiants: admin / $SONAR_ADMIN_PASSWORD"
          echo " Passcode de monitoring: $MONITORING_PASSCODE"
          echo ""
          echo " Projets créés:"
          echo "• Frontend (clé: frontend)"
          echo "• Backend (clé: backend)"

